//
//  PSHook.h
//  ParasiteRuntime
//
//  Created by Alexander Zielenski on 3/31/16.
//  CPSyright Â© 2016 ParasiteTeam. All rights reserved.
//

#ifndef PSHook_h
#define PSHook_h

// PSHook doesn't support functions with variadic arguments
// if you need to support that, you must define your functions without macros
// and use PSHookFunctionPtr
#define PSHook(TYPE, NAME, CALL, ARGS...) \
    __unused static TYPE (*$O_ ##NAME)(ARGS); \
    static TYPE $_##NAME(TYPE (*_old)(ARGS), ##ARGS); \
    static TYPE O_##NAME(ARGS) {\
    return $_##NAME CALL;\
}\
static TYPE $_##NAME(TYPE (*_old)(ARGS), ##ARGS)

#define PSHook0(TYPE, NAME) PSHook(TYPE, NAME, ($O_##NAME))
#define PSHook1(TYPE, NAME, TYPE1, ARG1) PSHook(TYPE, NAME, ($O_##NAME, ARG1), TYPE1 ARG1)
#define PSHook2(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2), TYPE1 ARG1, TYPE2 ARG2)
#define PSHook3(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3)
#define PSHook4(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4)
#define PSHook5(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5)
#define PSHook6(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6)
#define PSHook7(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6, TYPE7, ARG7) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6, TYPE7 ARG7)
#define PSHook8(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6, TYPE7, ARG7, TYPE8, ARG8) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6, TYPE7 ARG7, TYPE8 ARG8)
#define PSHook9(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6, TYPE7, ARG7, TYPE8, ARG8, TYPE9, ARG9) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6, TYPE7 ARG7, TYPE8 ARG8, TYPE9 ARG9)
#define PSHook10(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6, TYPE7, ARG7, TYPE8, ARG8, TYPE9, ARG9, TYPE10, ARG10) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6, TYPE7 ARG7, TYPE8 ARG8, TYPE9 ARG9, TYPE10 ARG10)
#define PSHook11(TYPE, NAME, TYPE1, ARG1, TYPE2, ARG2, TYPE3, ARG3, TYPE4, ARG4, TYPE5, ARG5, TYPE6, ARG6, TYPE7, ARG7, TYPE8, ARG8, TYPE9, ARG9, TYPE10, ARG10, TYPE11, ARG11) PSHook(TYPE, NAME, ($O_##NAME, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7, ARG8, ARG9, ARG10, ARG11), TYPE1 ARG1, TYPE2 ARG2, TYPE3 ARG3, TYPE4 ARG4, TYPE5 ARG5, TYPE6 ARG6, TYPE7 ARG7, TYPE8 ARG8, TYPE9 ARG9, TYPE10 ARG10, TYPE11 ARG11)


#define PSHookFunction(NAME) \
PSHookFunctionPtr(NAME, O_##NAME, (void **)&$O_##NAME)

// Only works in function hooks defined by PSHook
#define PSOldCall(ARGS...) _old(ARGS)

#include <stdio.h>

// this is a wrapper around mach_override incase we ever stop using it so API remains constant
int PSHookFunctionPtr(void *symbol, void *replace, void **result);
void *PSFindSymbol(const void *image, const char *name);
void *PSGetImageByName(const char *file);

#endif /* PSHook_h */
